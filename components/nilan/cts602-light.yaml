packages:
  remote_package:
    url: https://github.com/Jopand/esphome_components
    ref: split_into_separate_files
    files:
      - components/nilan/basic.yaml
      ### INPUT REGISTER FILES ###
      - components/nilan/input/0.yaml
      - components/nilan/input/1.yaml
      - components/nilan/input/100.yaml
      - components/nilan/input/101.yaml
      - components/nilan/input/103.yaml
      - components/nilan/input/105.yaml
      - components/nilan/input/113.yaml
      - components/nilan/input/114.yaml
      - components/nilan/input/115.yaml
      - components/nilan/input/200.yaml
      - components/nilan/input/209.yaml
      - components/nilan/input/222.yaml
      - components/nilan/input/400.yaml
      - components/nilan/input/401.yaml
      - components/nilan/input/402.yaml
      - components/nilan/input/403.yaml
      - components/nilan/input/404.yaml
      - components/nilan/input/405.yaml
      - components/nilan/input/406.yaml
      - components/nilan/input/407.yaml
      - components/nilan/input/408.yaml
      - components/nilan/input/409.yaml
      - components/nilan/input/1000.yaml
      - components/nilan/input/1002.yaml
      - components/nilan/input/1003.yaml
      - components/nilan/input/1100.yaml     
      - components/nilan/input/1101.yaml
      - components/nilan/input/1102.yaml
      - components/nilan/input/1103.yaml
      - components/nilan/input/1104.yaml
      - components/nilan/input/1200.yaml
      - components/nilan/input/1201.yaml
      - components/nilan/input/1202.yaml
      - components/nilan/input/1203.yaml
      - components/nilan/input/1204.yaml
      - components/nilan/input/1205.yaml
      - components/nilan/input/1206.yaml
      ### HOLDING REGISTER FILES ###
      - components/nilan/holding/0.yaml
      - components/nilan/holding/100.yaml
      - components/nilan/holding/101.yaml
      - components/nilan/holding/102.yaml
      - components/nilan/holding/103.yaml
      - components/nilan/holding/104.yaml
      - components/nilan/holding/105.yaml
      - components/nilan/holding/122.yaml
      - components/nilan/holding/126.yaml
      - components/nilan/holding/202.yaml
      - components/nilan/holding/300.yaml
      - components/nilan/holding/301.yaml
      - components/nilan/holding/302.yaml
      - components/nilan/holding/303.yaml
      - components/nilan/holding/304.yaml
      - components/nilan/holding/305.yaml
      - components/nilan/holding/500.yaml
      - components/nilan/holding/600.yaml
      - components/nilan/holding/601.yaml
      - components/nilan/holding/602.yaml
      - components/nilan/holding/603.yaml
      - components/nilan/holding/604.yaml
      - components/nilan/holding/605.yaml
      - components/nilan/holding/610.yaml
      - components/nilan/holding/611.yaml
      - components/nilan/holding/612.yaml
      - components/nilan/holding/613.yaml
      - components/nilan/holding/614.yaml
      - components/nilan/holding/615.yaml
      - components/nilan/holding/700.yaml
      - components/nilan/holding/1000.yaml
      - components/nilan/holding/1001.yaml
      - components/nilan/holding/1005.yaml
      - components/nilan/holding/1006.yaml
      - components/nilan/holding/1007.yaml
      - components/nilan/holding/1102.yaml
      - components/nilan/holding/1103.yaml
      - components/nilan/holding/1104.yaml
      - components/nilan/holding/1105.yaml
      - components/nilan/holding/1200.yaml
      - components/nilan/holding/1201.yaml
      - components/nilan/holding/1202.yaml
      - components/nilan/holding/1203.yaml
      - components/nilan/holding/1204.yaml
      - components/nilan/holding/1205.yaml
      - components/nilan/holding/1206.yaml
      - components/nilan/holding/1207.yaml
      - components/nilan/holding/1800.yaml
      - components/nilan/holding/1910.yaml
      - components/nilan/holding/1911.yaml
      - components/nilan/holding/1912.yaml
      - components/nilan/holding/1913.yaml
      - components/nilan/holding/1920.yaml
      - components/nilan/holding/1921.yaml
      - components/nilan/holding/1922.yaml
      - components/nilan/holding/2002.yaml
      - components/nilan/holding/2200.yaml
    refresh: 0s

time:
  - platform: homeassistant
    id: homeassistant_time

binary_sensor:
  - platform: template
    id: nilan_bypass_state
    name: Bypass state
    device_class: opening
  - platform: template
    name: "Air filter alarm (from alarm list)"
    id: nilan_filter_alarm_from_list
    lambda: !lambda |-
      return (id(nilan_alarm_list_1_id).state == 19
        || id(nilan_alarm_list_2_id).state == 19
        || id(nilan_alarm_list_3_id).state == 19);

button:
  - platform: template
    id: nilan_sync_homeassistant_time
    name: Sync time with Home Assistant
    on_press:
      then:
        lambda: !lambda |-
          auto current_time = id(homeassistant_time).now();
          ESP_LOGI("custom_logger", "Current Date: %04d-%02d-%02d, Time: %02d:%02d:%02d",
          current_time.year, current_time.day_of_month, current_time.day_of_week,
          current_time.hour, current_time.minute, current_time.second); 

          // Set all time entity values
          auto callSecond = id(nilan_time_second).make_call();
          callSecond.set_value(current_time.second);
          callSecond.perform();

          auto callMinute = id(nilan_time_minute).make_call();
          callMinute.set_value(current_time.minute);
          callMinute.perform();

          auto callHour = id(nilan_time_hour).make_call();
          callHour.set_value(current_time.hour);
          callHour.perform();

          auto callDay = id(nilan_time_day).make_call();
          callDay.set_value(current_time.day_of_month);
          callDay.perform();

          auto callMonth = id(nilan_time_month).make_call();
          callMonth.set_value(current_time.month);
          callMonth.perform();

          auto callYear = id(nilan_time_year).make_call();
          callYear.set_value(current_time.year);
          callYear.perform();

text_sensor:
  - platform: template
    name: "Air Quality Index CO2 (AQI)"
    id: nilan_aqi_co2
    icon: mdi:air-filter    
  - platform: template
    name: "Alarm 1 timestamp"
    id: nilan_alarm_list_1_datetime
    lambda: |-
      uint16_t alarmDate = id(nilan_alarm_list_1_date).state;
      uint16_t alarmTime = id(nilan_alarm_list_1_time).state;
      
      if(!alarmDate ||!alarmTime) return std::string("");
      
      // Parse the date
      auto year = (alarmDate >> 9) + 1980;
      auto month = (alarmDate >> 5) & 0b00001111;
      auto day = alarmDate & 0b00011111;
      auto hour = (alarmTime >> 11) & 0b00011111;
      auto minute = (alarmTime >> 5) & 0b0011111;
      auto second = (alarmTime & 0b00011111) * 2;
      
      return std::to_string(year) + "-" +
        ((month < 10) ? "0" : "") + std::to_string(month) + "-" + 
        ((day < 10) ? "0" : "") + std::to_string(day) + " " +
        ((hour < 10) ? "0" : "") + std::to_string(hour) + ":" +
        ((minute < 10) ? "0" : "") + std::to_string(minute) + ":" +
        ((second < 10) ? "0" : "") + std::to_string(second);
  - platform: template
    name: "Alarm 2 timestamp"
    id: nilan_alarm_list_2_datetime
    lambda: |-
      uint16_t alarmDate = id(nilan_alarm_list_2_date).state;
      uint16_t alarmTime = id(nilan_alarm_list_2_time).state;
      
      if(!alarmDate ||!alarmTime) return std::string("");
      
      // Parse the date
      auto year = (alarmDate >> 9) + 1980;
      auto month = (alarmDate >> 5) & 0b00001111;
      auto day = alarmDate & 0b00011111;
      auto hour = (alarmTime >> 11) & 0b00011111;
      auto minute = (alarmTime >> 5) & 0b0011111;
      auto second = (alarmTime & 0b00011111) * 2;
      
      return std::to_string(year) + "-" +
        ((month < 10) ? "0" : "") + std::to_string(month) + "-" + 
        ((day < 10) ? "0" : "") + std::to_string(day) + " " +
        ((hour < 10) ? "0" : "") + std::to_string(hour) + ":" +
        ((minute < 10) ? "0" : "") + std::to_string(minute) + ":" +
        ((second < 10) ? "0" : "") + std::to_string(second);
  - platform: template
    name: "Alarm 3 timestamp"
    id: nilan_alarm_list_3_datetime
    lambda: |-
      uint16_t alarmDate = id(nilan_alarm_list_3_date).state;
      uint16_t alarmTime = id(nilan_alarm_list_3_time).state;
      
      if(!alarmDate ||!alarmTime) return std::string("");
      
      // Parse the date
      auto year = (alarmDate >> 9) + 1980;
      auto month = (alarmDate >> 5) & 0b00001111;
      auto day = alarmDate & 0b00011111;
      auto hour = (alarmTime >> 11) & 0b00011111;
      auto minute = (alarmTime >> 5) & 0b0011111;
      auto second = (alarmTime & 0b00011111) * 2;
      
      return std::to_string(year) + "-" +
        ((month < 10) ? "0" : "") + std::to_string(month) + "-" + 
        ((day < 10) ? "0" : "") + std::to_string(day) + " " +
        ((hour < 10) ? "0" : "") + std::to_string(hour) + ":" +
        ((minute < 10) ? "0" : "") + std::to_string(minute) + ":" +
        ((second < 10) ? "0" : "") + std::to_string(second);
  - platform: template
    name: "Air filter alarm status"
    lambda: |-
      if (id(nilan_filter_alarm).state) {
        return {"Skift filter"};
      } else {
        return {"Filter OK"};
      }
